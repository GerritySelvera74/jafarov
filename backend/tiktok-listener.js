import { WebcastPushConnection } from 'tiktok-live-connector';
import dotenv from 'dotenv';
import Database from 'better-sqlite3';
import path from 'path';
import { fileURLToPath } from 'url';

dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const dbPath = path.join(__dirname, 'data', 'game.db');
const db = new Database(dbPath);

let tiktokConnection = null;
let reconnectAttempts = 0;
const MAX_RECONNECT_ATTEMPTS = 10;

export async function startTikTokListener() {
  try {
    const username = process.env.TIKTOK_USERNAME;

    if (!username) {
      console.log('‚ö†Ô∏è TikTok username –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env');
      return;
    }

    if (tiktokConnection) {
      try {
        await tiktokConnection.disconnect();
      } catch (e) {
        // Ignore
      }
    }

    tiktokConnection = new WebcastPushConnection(username);

    tiktokConnection.on('connect', () => {
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ TikTok —Å—Ç—Ä–∏–º—É:', username);
      global.tiktokConnected = true;
      reconnectAttempts = 0;
    });

    tiktokConnection.on('disconnect', () => {
      console.log('‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç TikTok —Å—Ç—Ä–∏–º–∞');
      global.tiktokConnected = false;
      attemptReconnect();
    });

    tiktokConnection.on('error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ TikTok:', error);
      global.tiktokConnected = false;
      attemptReconnect();
    });

    // üéØ –°–õ–£–®–ê–ï–ú –ö–û–ú–ê–ù–î–´ !reg –ò–ó –ß–ê–¢–ê
    tiktokConnection.on('chat', (data) => {
      const message = data.comment.toLowerCase().trim();
      const tiktokUsername = data.uniqueId;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É !reg
      if (message === '!reg') {
        handleRegistration(tiktokUsername);
      }
    });

    tiktokConnection.on('like', (data) => {
      console.log(`‚ù§Ô∏è ${data.uniqueId} –ª–∞–π–∫–Ω—É–ª —Å—Ç—Ä–∏–º`);
    });

    tiktokConnection.on('follow', (data) => {
      console.log(`üîî ${data.uniqueId} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è`);
    });

    await tiktokConnection.connect();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ TikTok:', error.message);
    global.tiktokConnected = false;
    attemptReconnect();
  }
}

// üéØ –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î–´ !reg
function handleRegistration(tiktokUsername) {
  try {
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –ø–æ tiktok_id
    const userStmt = db.prepare('SELECT id, nick FROM users WHERE tiktok_id = ?');
    const user = userStmt.get(tiktokUsername);

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î
    if (!user) {
      const logStmt = db.prepare(`
        INSERT INTO registration_logs (tiktok_username, nick, status, message)
        VALUES (?, ?, ?, ?)
      `);
      logStmt.run(tiktokUsername, tiktokUsername, 'failed', '–ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å–∞–π—Ç–µ');
      
      console.log(`‚ùå ${tiktokUsername}: –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å–∞–π—Ç–µ`);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏
    const queueCheckStmt = db.prepare('SELECT id FROM queue WHERE user_id = ?');
    const inQueue = queueCheckStmt.get(user.id);

    if (inQueue) {
      const logStmt = db.prepare(`
        INSERT INTO registration_logs (user_id, tiktok_username, nick, status, message)
        VALUES (?, ?, ?, ?, ?)
      `);
      logStmt.run(user.id, tiktokUsername, user.nick, 'already_queued', '–£–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏');
      
      console.log(`‚ö†Ô∏è ${tiktokUsername} (${user.nick}) —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏!`);
      return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
    const posStmt = db.prepare('SELECT MAX(position) as max_pos FROM queue');
    const posResult = posStmt.get();
    const position = (posResult.max_pos || 0) + 1;

    const queueStmt = db.prepare('INSERT INTO queue (user_id, position) VALUES (?, ?)');
    queueStmt.run(user.id, position);

    // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    const logStmt = db.prepare(`
      INSERT INTO registration_logs (user_id, tiktok_username, nick, status, message)
      VALUES (?, ?, ?, ?, ?)
    `);
    logStmt.run(user.id, tiktokUsername, user.nick, 'success', `–î–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å. –ü–æ–∑–∏—Ü–∏—è: ${position}`);

    console.log(`‚úÖ ${tiktokUsername} (${user.nick}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å! –ü–æ–∑–∏—Ü–∏—è: ${position}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
  }
}

function attemptReconnect() {
  if (reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {
    reconnectAttempts++;
    console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è... (${reconnectAttempts}/${MAX_RECONNECT_ATTEMPTS})`);
    setTimeout(() => {
      startTikTokListener();
    }, 5000);
  } else {
    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ TikTok –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫');
  }
}

export async function stopTikTokListener() {
  if (tiktokConnection) {
    try {
      await tiktokConnection.disconnect();
      console.log('‚úÖ TikTok —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
    }
  }
}